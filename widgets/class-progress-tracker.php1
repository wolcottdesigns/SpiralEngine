<?php
/**
 * Progress Tracker Widget
 * 
 * @package    SpiralEngine
 * @subpackage Widgets
 * @file       widgets/class-progress-tracker.php
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Progress Tracker Widget Class
 * 
 * Tracks overall mental health progress and milestones
 * 
 * @since 1.0.0
 */
class SpiralEngine_Widget_Progress_Tracker extends SpiralEngine_Widget {
    
    /**
     * Widget fields configuration
     * 
     * @var array
     */
    protected $fields = array();
    
    /**
     * Widget color
     * 
     * @var string
     */
    protected $color = '#9C27B0';
    
    /**
     * Widget category
     * 
     * @var string
     */
    protected $category = 'tracking';
    
    /**
     * Tier features configuration
     * 
     * @var array
     */
    protected $tier_features = array();
    
    /**
     * Constructor
     */
    public function __construct() {
        parent::__construct();
    }
    
    /**
     * Initialize widget
     */
    protected function init() {
        $this->id = 'progress-tracker';
        $this->name = 'Progress Tracker';
        $this->description = 'Track your mental health progress and celebrate milestones';
        $this->icon = 'dashicons-chart-line';
        $this->color = '#9C27B0';
        $this->category = 'tracking';
        $this->tier_features = array(
            'free' => array(
                'basic_tracking' => true,
                'milestone_tracking' => true,
                'weekly_reviews' => true,
                'max_custom_metrics' => 3
            ),
            'silver' => array(
                'basic_tracking' => true,
                'milestone_tracking' => true,
                'weekly_reviews' => true,
                'monthly_reviews' => true,
                'progress_photos' => true,
                'comparison_views' => true,
                'max_custom_metrics' => 5
            ),
            'gold' => array(
                'basic_tracking' => true,
                'milestone_tracking' => true,
                'weekly_reviews' => true,
                'monthly_reviews' => true,
                'progress_photos' => true,
                'comparison_views' => true,
                'quarterly_reports' => true,
                'goal_integration' => true,
                'achievement_badges' => true,
                'max_custom_metrics' => 10
            ),
            'platinum' => array(
                'basic_tracking' => true,
                'milestone_tracking' => true,
                'weekly_reviews' => true,
                'monthly_reviews' => true,
                'progress_photos' => true,
                'comparison_views' => true,
                'quarterly_reports' => true,
                'goal_integration' => true,
                'achievement_badges' => true,
                'ai_insights' => true,
                'therapist_reports' => true,
                'max_custom_metrics' => 'unlimited'
            )
        );
        
        // Initialize fields
        $this->fields = array(
            'review_type' => array(
                'label' => __('Progress Review Type', 'spiralengine'),
                'type' => 'select',
                'options' => array(
                    '' => __('-- Select Type --', 'spiralengine'),
                    'daily' => __('Daily Progress', 'spiralengine'),
                    'weekly' => __('Weekly Review', 'spiralengine'),
                    'monthly' => __('Monthly Review', 'spiralengine'),
                    'milestone' => __('Milestone Achieved', 'spiralengine'),
                    'custom' => __('Custom Check-in', 'spiralengine')
                ),
                'required' => true,
                'tier' => 'free'
            ),
            'overall_progress' => array(
                'label' => __('Overall Progress Rating', 'spiralengine'),
                'type' => 'range',
                'min' => 1,
                'max' => 10,
                'default' => 5,
                'required' => true,
                'description' => __('1 = No progress, 10 = Excellent progress', 'spiralengine'),
                'tier' => 'free'
            ),
            'areas_improved' => array(
                'label' => __('Areas of Improvement', 'spiralengine'),
                'type' => 'checkbox',
                'options' => array(
                    'mood' => __('Mood Stability', 'spiralengine'),
                    'anxiety' => __('Anxiety Management', 'spiralengine'),
                    'sleep' => __('Sleep Quality', 'spiralengine'),
                    'relationships' => __('Relationships', 'spiralengine'),
                    'work' => __('Work/Productivity', 'spiralengine'),
                    'self_care' => __('Self-Care Routine', 'spiralengine'),
                    'coping' => __('Coping Skills', 'spiralengine'),
                    'physical' => __('Physical Health', 'spiralengine'),
                    'mindfulness' => __('Mindfulness Practice', 'spiralengine'),
                    'communication' => __('Communication', 'spiralengine')
                ),
                'tier' => 'free'
            ),
            'milestone_description' => array(
                'label' => __('Milestone/Achievement', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 2,
                'placeholder' => __('Describe your milestone or achievement', 'spiralengine'),
                'conditional' => array(
                    'field' => 'review_type',
                    'value' => 'milestone'
                ),
                'tier' => 'free'
            ),
            'wins_victories' => array(
                'label' => __('Wins & Victories', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 3,
                'placeholder' => __('What went well? What are you proud of?', 'spiralengine'),
                'tier' => 'free'
            ),
            'challenges_faced' => array(
                'label' => __('Challenges Faced', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 3,
                'placeholder' => __('What challenges did you encounter?', 'spiralengine'),
                'tier' => 'silver'
            ),
            'lessons_learned' => array(
                'label' => __('Lessons Learned', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 3,
                'placeholder' => __('What insights or lessons did you gain?', 'spiralengine'),
                'tier' => 'silver'
            ),
            'custom_metrics' => array(
                'label' => __('Custom Progress Metrics', 'spiralengine'),
                'type' => 'custom',
                'render_callback' => array($this, 'render_custom_metrics'),
                'tier' => 'free'
            ),
            'comparison_period' => array(
                'label' => __('Compare to Previous Period', 'spiralengine'),
                'type' => 'select',
                'options' => array(
                    '' => __('-- No Comparison --', 'spiralengine'),
                    'last_week' => __('Last Week', 'spiralengine'),
                    'last_month' => __('Last Month', 'spiralengine'),
                    'last_quarter' => __('Last Quarter', 'spiralengine'),
                    'last_year' => __('Last Year', 'spiralengine')
                ),
                'tier' => 'silver'
            ),
            'medication_changes' => array(
                'label' => __('Any Medication Changes?', 'spiralengine'),
                'type' => 'radio',
                'options' => array(
                    'no' => __('No changes', 'spiralengine'),
                    'yes' => __('Yes, changes made', 'spiralengine')
                ),
                'default' => 'no',
                'tier' => 'silver'
            ),
            'therapy_progress' => array(
                'label' => __('Therapy Progress', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 2,
                'placeholder' => __('Progress in therapy sessions', 'spiralengine'),
                'tier' => 'gold'
            ),
            'goal_progress' => array(
                'label' => __('Progress on Goals', 'spiralengine'),
                'type' => 'custom',
                'render_callback' => array($this, 'render_goal_progress'),
                'tier' => 'gold'
            ),
            'support_system' => array(
                'label' => __('Support System Strength', 'spiralengine'),
                'type' => 'range',
                'min' => 1,
                'max' => 5,
                'default' => 3,
                'description' => __('Rate your support system', 'spiralengine'),
                'tier' => 'gold'
            ),
            'self_compassion' => array(
                'label' => __('Self-Compassion Level', 'spiralengine'),
                'type' => 'range',
                'min' => 1,
                'max' => 5,
                'default' => 3,
                'description' => __('How kind were you to yourself?', 'spiralengine'),
                'tier' => 'gold'
            ),
            'next_focus' => array(
                'label' => __('Next Period Focus', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 3,
                'placeholder' => __('What will you focus on next?', 'spiralengine'),
                'tier' => 'silver'
            ),
            'celebration_plan' => array(
                'label' => __('How Will You Celebrate?', 'spiralengine'),
                'type' => 'text',
                'placeholder' => __('Your celebration/reward plan', 'spiralengine'),
                'tier' => 'gold'
            ),
            'share_progress' => array(
                'label' => __('Share Progress Report?', 'spiralengine'),
                'type' => 'checkbox',
                'options' => array(
                    'therapist' => __('Share with Therapist', 'spiralengine'),
                    'support_person' => __('Share with Support Person', 'spiralengine'),
                    'export_pdf' => __('Export as PDF', 'spiralengine')
                ),
                'tier' => 'platinum'
            ),
            'notes' => array(
                'label' => __('Additional Reflections', 'spiralengine'),
                'type' => 'textarea',
                'rows' => 4,
                'placeholder' => __('Any other thoughts or reflections', 'spiralengine'),
                'tier' => 'free'
            )
        );
    }
    
    /**
     * Get widget schema
     * 
     * @return array Widget schema
     */
    public function get_schema() {
        return array(
            'fields' => $this->fields,
            'capabilities' => array(
                'progress_tracking' => true,
                'milestone_recording' => true,
                'custom_metrics' => true,
                'goal_integration' => $this->check_feature_availability('goal_integration'),
                'achievement_badges' => $this->check_feature_availability('achievement_badges'),
                'ai_insights' => $this->check_feature_availability('ai_insights')
            ),
            'analytics' => array(
                'track_progress_trends' => true,
                'track_milestones' => true,
                'track_improvements' => true,
                'track_consistency' => true
            )
        );
    }
    
    /**
     * Check if a feature is available for the current user's tier
     * 
     * @param string $feature Feature name
     * @return bool
     */
    private function check_feature_availability($feature) {
        // For now, return true during widget initialization
        // The actual tier checking will be done when the widget is used
        return true;
    }
    
    /**
     * Render form
     * 
     * @param array $args Form arguments
     * @return string HTML output
     */
    public function render_form($args = []) {
        // Get user data if editing
        $values = isset($args['values']) ? $args['values'] : array();
        
        ob_start();
        ?>
        <div class="spiralengine-widget-form spiralengine-progress-tracker-form">
            <?php foreach ($this->fields as $field_id => $field): ?>
                <?php if (!$this->can_use_feature_by_field($field)): continue; endif; ?>
                
                <?php 
                // Handle conditional fields
                $conditional_class = '';
                $conditional_data = '';
                if (!empty($field['conditional'])) {
                    $conditional_class = 'spiralengine-conditional-field';
                    $conditional_data = sprintf(
                        'data-condition-field="%s" data-condition-value="%s"',
                        esc_attr($field['conditional']['field']),
                        esc_attr($field['conditional']['value'])
                    );
                }
                ?>
                
                <div class="spiralengine-form-group <?php echo $conditional_class; ?>" <?php echo $conditional_data; ?>>
                    <?php if ($field['type'] !== 'hidden'): ?>
                        <label for="<?php echo esc_attr($field_id); ?>">
                            <?php echo esc_html($field['label']); ?>
                            <?php if (!empty($field['required'])): ?>
                                <span class="required">*</span>
                            <?php endif; ?>
                        </label>
                    <?php endif; ?>
                    
                    <?php
                    $value = isset($values[$field_id]) ? $values[$field_id] : (isset($field['default']) ? $field['default'] : '');
                    $this->render_field($field_id, $field, $value);
                    ?>
                    
                    <?php if (!empty($field['description'])): ?>
                        <p class="description"><?php echo esc_html($field['description']); ?></p>
                    <?php endif; ?>
                </div>
            <?php endforeach; ?>
        </div>
        
        <script>
        jQuery(document).ready(function($) {
            // Handle conditional fields
            function updateProgressTrackerConditionals() {
                $('.spiralengine-conditional-field').each(function() {
                    var $field = $(this);
                    var conditionField = $field.data('condition-field');
                    var conditionValue = $field.data('condition-value');
                    var $conditionInput = $('[name="' + conditionField + '"]');
                    
                    if ($conditionInput.length) {
                        var currentValue = $conditionInput.val();
                        if (currentValue === conditionValue) {
                            $field.show();
                        } else {
                            $field.hide();
                        }
                    }
                });
            }
            
            // Initial check
            updateProgressTrackerConditionals();
            
            // Update on change
            $('select[name="review_type"]').on('change', updateProgressTrackerConditionals);
            
            // Handle range inputs
            $('.spiralengine-range-input').on('input', function() {
                $(this).siblings('.range-value').text($(this).val());
            });
        });
        
        // Function to add custom metric
        function spiralEngineAddCustomMetric() {
            // This would typically open a modal or prompt to add a new metric
            alert('Custom metric addition would be implemented here');
        }
        </script>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Render custom metrics field
     * 
     * @param array $field Field configuration
     * @param mixed $value Current value
     * @return string HTML output
     */
    public function render_custom_metrics($field, $value = null) {
        // Get user tier - for now default to 'free' during initialization
        $tier = 'free';
        if (method_exists($this, 'get_user_tier')) {
            $tier = $this->get_user_tier();
        }
        $max_metrics = $this->tier_features[$tier]['max_custom_metrics'] ?? 3;
        
        ob_start();
        ?>
        <div class="spiralengine-custom-metrics">
            <p class="description"><?php printf(__('Track up to %s custom metrics', 'spiralengine'), $max_metrics === 'unlimited' ? __('unlimited', 'spiralengine') : $max_metrics); ?></p>
            <div id="custom-metrics-container">
                <?php
                $metrics = $this->get_user_custom_metrics();
                $count = 0;
                foreach ($metrics as $key => $metric):
                    if ($max_metrics !== 'unlimited' && $count >= $max_metrics) break;
                    $count++;
                ?>
                    <div class="custom-metric-row">
                        <label><?php echo esc_html($metric['name']); ?>:</label>
                        <input type="range" 
                               name="custom_metrics[<?php echo esc_attr($key); ?>]" 
                               min="1" 
                               max="10" 
                               value="<?php echo isset($value[$key]) ? esc_attr($value[$key]) : 5; ?>"
                               class="spiralengine-range-input">
                        <span class="range-value"><?php echo isset($value[$key]) ? esc_html($value[$key]) : 5; ?></span>
                    </div>
                <?php endforeach; ?>
            </div>
            <?php if ($max_metrics === 'unlimited' || $count < $max_metrics): ?>
                <button type="button" class="button" onclick="spiralEngineAddCustomMetric()"><?php _e('Add Custom Metric', 'spiralengine'); ?></button>
            <?php endif; ?>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Render goal progress field
     * 
     * @param array $field Field configuration
     * @param mixed $value Current value
     * @return string HTML output
     */
    public function render_goal_progress($field, $value = null) {
        $goals = $this->get_user_active_goals();
        
        if (empty($goals)) {
            return '<p class="description">' . __('No active goals found. Set goals in the Goals section.', 'spiralengine') . '</p>';
        }
        
        ob_start();
        ?>
        <div class="spiralengine-goal-progress">
            <?php foreach ($goals as $goal_id => $goal): ?>
                <div class="goal-progress-row">
                    <label><?php echo esc_html($goal['title']); ?>:</label>
                    <select name="goal_progress[<?php echo esc_attr($goal_id); ?>]">
                        <option value=""><?php _e('-- Select Progress --', 'spiralengine'); ?></option>
                        <option value="no_progress" <?php selected($value[$goal_id] ?? '', 'no_progress'); ?>><?php _e('No Progress', 'spiralengine'); ?></option>
                        <option value="minimal" <?php selected($value[$goal_id] ?? '', 'minimal'); ?>><?php _e('Minimal Progress', 'spiralengine'); ?></option>
                        <option value="moderate" <?php selected($value[$goal_id] ?? '', 'moderate'); ?>><?php _e('Moderate Progress', 'spiralengine'); ?></option>
                        <option value="good" <?php selected($value[$goal_id] ?? '', 'good'); ?>><?php _e('Good Progress', 'spiralengine'); ?></option>
                        <option value="excellent" <?php selected($value[$goal_id] ?? '', 'excellent'); ?>><?php _e('Excellent Progress', 'spiralengine'); ?></option>
                        <option value="completed" <?php selected($value[$goal_id] ?? '', 'completed'); ?>><?php _e('Goal Completed!', 'spiralengine'); ?></option>
                    </select>
                </div>
            <?php endforeach; ?>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Validate widget data
     * 
     * @param array $data Data to validate
     * @return array Validation result
     */
    public function validate_data($data) {
        $errors = array();
        
        // Validate review type
        if (empty($data['review_type'])) {
            $errors[] = __('Please select a review type.', 'spiralengine');
        }
        
        // Validate overall progress
        if (empty($data['overall_progress']) || $data['overall_progress'] < 1 || $data['overall_progress'] > 10) {
            $errors[] = __('Please rate your overall progress (1-10).', 'spiralengine');
        }
        
        // Validate milestone description if milestone type
        if (isset($data['review_type']) && $data['review_type'] === 'milestone' && empty($data['milestone_description'])) {
            $errors[] = __('Please describe your milestone.', 'spiralengine');
        }
        
        // Validate at least one win
        if (empty($data['wins_victories'])) {
            $errors[] = __('Please share at least one win or victory.', 'spiralengine');
        }
        
        return array(
            'valid' => empty($errors),
            'errors' => $errors
        );
    }
    
    /**
     * Process widget data before saving
     * 
     * @param array $data Data to process
     * @return array Processed data
     */
    public function process_data($data) {
        global $wpdb;
        
        // Calculate severity (inverse of progress)
        $progress = intval($data['overall_progress']);
        $severity = 11 - $progress;
        
        // Build processed data
        $processed = array(
            'widget_id' => $this->id,
            'user_id' => get_current_user_id(),
            'data' => $data,
            'severity' => $severity,
            'created_at' => current_time('mysql'),
            'calculated' => array(
                'review_date' => current_time('Y-m-d'),
                'review_time' => current_time('H:i:s'),
                'week_number' => current_time('W'),
                'month' => current_time('F'),
                'quarter' => ceil(current_time('n') / 3)
            )
        );
        
        // Count improvements
        if (!empty($data['areas_improved']) && is_array($data['areas_improved'])) {
            $processed['calculated']['improvement_count'] = count($data['areas_improved']);
        }
        
        // Calculate progress score
        $progress_score = $progress;
        if (!empty($processed['calculated']['improvement_count'])) {
            $progress_score += min($processed['calculated']['improvement_count'] * 0.5, 2);
        }
        $processed['calculated']['progress_score'] = min($progress_score, 10);
        
        // Check for milestones
        if (isset($data['review_type']) && $data['review_type'] === 'milestone') {
            $this->record_milestone($data['milestone_description']);
        }
        
        // Update custom metrics if provided
        if (!empty($data['custom_metrics'])) {
            $this->update_custom_metrics_values($data['custom_metrics']);
        }
        
        // Check for achievement badges
        if ($this->check_feature_availability('achievement_badges')) {
            $this->check_achievements($processed);
        }
        
        return array(
            'data' => $processed,
            'severity' => $severity
        );
    }
    
    /**
     * Get user's custom metrics
     * 
     * @return array Custom metrics
     */
    private function get_user_custom_metrics() {
        $user_id = get_current_user_id();
        $metrics = get_user_meta($user_id, 'spiralengine_custom_metrics', true);
        return is_array($metrics) ? $metrics : array();
    }
    
    /**
     * Get user's active goals
     * 
     * @return array Active goals
     */
    private function get_user_active_goals() {
        $user_id = get_current_user_id();
        $goals = get_user_meta($user_id, 'spiralengine_active_goals', true);
        return is_array($goals) ? $goals : array();
    }
    
    /**
     * Record a milestone
     * 
     * @param string $description Milestone description
     */
    private function record_milestone($description) {
        $user_id = get_current_user_id();
        $milestones = get_user_meta($user_id, 'spiralengine_milestones', true);
        
        if (!is_array($milestones)) {
            $milestones = array();
        }
        
        $milestones[] = array(
            'description' => $description,
            'date' => current_time('Y-m-d'),
            'timestamp' => current_time('timestamp')
        );
        
        update_user_meta($user_id, 'spiralengine_milestones', $milestones);
    }
    
    /**
     * Update custom metrics values
     * 
     * @param array $values Metric values
     */
    private function update_custom_metrics_values($values) {
        $user_id = get_current_user_id();
        $history = get_user_meta($user_id, 'spiralengine_metrics_history', true);
        
        if (!is_array($history)) {
            $history = array();
        }
        
        $history[current_time('Y-m-d')] = $values;
        
        // Keep only last 90 days
        $history = array_slice($history, -90, null, true);
        
        update_user_meta($user_id, 'spiralengine_metrics_history', $history);
    }
    
    /**
     * Check for achievements
     * 
     * @param array $data Processed data
     */
    private function check_achievements($data) {
        $user_id = get_current_user_id();
        $achievements = get_user_meta($user_id, 'spiralengine_achievements', true);
        
        if (!is_array($achievements)) {
            $achievements = array();
        }
        
        // Check various achievement conditions
        $episodes_count = $this->get_total_episodes_count();
        
        // First progress review
        if (!isset($achievements['first_progress']) && isset($data['data']['review_type']) && $data['data']['review_type'] === 'weekly') {
            $achievements['first_progress'] = array(
                'name' => __('First Weekly Review', 'spiralengine'),
                'date' => current_time('Y-m-d'),
                'icon' => '🌟'
            );
        }
        
        // Consistent progress (5+ reviews)
        if (!isset($achievements['consistent_progress']) && $episodes_count >= 5) {
            $achievements['consistent_progress'] = array(
                'name' => __('Consistent Tracker', 'spiralengine'),
                'date' => current_time('Y-m-d'),
                'icon' => '📈'
            );
        }
        
        // High progress score
        if (!isset($achievements['high_progress']) && isset($data['calculated']['progress_score']) && $data['calculated']['progress_score'] >= 9) {
            $achievements['high_progress'] = array(
                'name' => __('Excellent Progress', 'spiralengine'),
                'date' => current_time('Y-m-d'),
                'icon' => '🏆'
            );
        }
        
        update_user_meta($user_id, 'spiralengine_achievements', $achievements);
    }
    
    /**
     * Get total episodes count for this widget
     * 
     * @return int Episode count
     */
    private function get_total_episodes_count() {
        global $wpdb;
        
        $table = $wpdb->prefix . 'spiralengine_episodes';
        $user_id = get_current_user_id();
        
        // Don't run database queries if we're just initializing
        if (!$user_id || !$wpdb) {
            return 0;
        }
        
        // Check if table exists first
        if ($wpdb->get_var("SHOW TABLES LIKE '{$table}'") != $table) {
            return 0;
        }
        
        return intval($wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$table} WHERE user_id = %d AND widget_id = %s",
            $user_id,
            $this->id
        )));
    }
    
    /**
     * Render analytics for the widget
     * 
     * @param int $user_id User ID
     * @return string HTML output
     */
    public function render_analytics($user_id = null) {
        if (!$user_id) {
            $user_id = get_current_user_id();
        }
        
        $episodes = $this->get_episodes($user_id, array(
            'limit' => 20,
            'orderby' => 'created_at',
            'order' => 'DESC'
        ));
        
        if (empty($episodes)) {
            return '<p class="spiralengine-no-data">' . __('No progress reviews recorded yet.', 'spiralengine') . '</p>';
        }
        
        // Analyze progress data
        $total_reviews = count($episodes);
        $progress_scores = array();
        $review_types = array();
        $improvement_areas = array();
        $milestones = array();
        $weekly_progress = array();
        
        foreach ($episodes as $episode) {
            $data = $episode['data'];
            
            // Progress tracking
            $progress_scores[] = intval($data['overall_progress'] ?? 5);
            
            // Review type tracking
            $type = $data['review_type'] ?? 'unknown';
            $review_types[$type] = ($review_types[$type] ?? 0) + 1;
            
            // Improvement areas
            if (!empty($data['areas_improved']) && is_array($data['areas_improved'])) {
                foreach ($data['areas_improved'] as $area) {
                    $improvement_areas[$area] = ($improvement_areas[$area] ?? 0) + 1;
                }
            }
            
            // Milestones
            if ($type === 'milestone' && !empty($data['milestone_description'])) {
                $milestones[] = array(
                    'description' => $data['milestone_description'],
                    'date' => $episode['created_at']
                );
            }
            
            // Weekly progress tracking
            if ($type === 'weekly') {
                $week = date('W', strtotime($episode['created_at']));
                $weekly_progress[$week] = intval($data['overall_progress'] ?? 5);
            }
        }
        
        $avg_progress = round(array_sum($progress_scores) / count($progress_scores), 1);
        $progress_trend = $this->calculate_trend($progress_scores);
        
        // Get achievements
        $achievements = get_user_meta($user_id, 'spiralengine_achievements', true) ?: array();
        
        ob_start();
        ?>
        <div class="spiralengine-analytics-grid">
            <div class="spiralengine-stat-card">
                <h4><?php _e('Average Progress', 'spiralengine'); ?></h4>
                <div class="spiralengine-stat-value"><?php echo $avg_progress; ?>/10</div>
                <div class="spiralengine-stat-label">
                    <?php 
                    if ($progress_trend > 0) {
                        echo '📈 ' . __('Improving', 'spiralengine');
                    } elseif ($progress_trend < 0) {
                        echo '📉 ' . __('Declining', 'spiralengine');
                    } else {
                        echo '➡️ ' . __('Stable', 'spiralengine');
                    }
                    ?>
                </div>
            </div>
            
            <div class="spiralengine-stat-card">
                <h4><?php _e('Total Reviews', 'spiralengine'); ?></h4>
                <div class="spiralengine-stat-value"><?php echo $total_reviews; ?></div>
                <div class="spiralengine-stat-label"><?php _e('Progress check-ins', 'spiralengine'); ?></div>
            </div>
            
            <div class="spiralengine-stat-card">
                <h4><?php _e('Milestones', 'spiralengine'); ?></h4>
                <div class="spiralengine-stat-value"><?php echo count($milestones); ?></div>
                <div class="spiralengine-stat-label"><?php _e('Achievements reached', 'spiralengine'); ?></div>
            </div>
            
            <div class="spiralengine-stat-card">
                <h4><?php _e('Consistency', 'spiralengine'); ?></h4>
                <div class="spiralengine-stat-value">
                    <?php 
                    $weekly_count = $review_types['weekly'] ?? 0;
                    echo round(($weekly_count / max(1, ceil($total_reviews / 7))) * 100) . '%';
                    ?>
                </div>
                <div class="spiralengine-stat-label"><?php _e('Weekly review rate', 'spiralengine'); ?></div>
            </div>
        </div>
        
        <div class="spiralengine-analytics-section">
            <h4><?php _e('Top Areas of Improvement', 'spiralengine'); ?></h4>
            <ul class="spiralengine-improvement-list">
                <?php 
                arsort($improvement_areas);
                $top_areas = array_slice($improvement_areas, 0, 5, true);
                foreach ($top_areas as $area => $count): 
                    $percentage = round(($count / $total_reviews) * 100);
                ?>
                    <li>
                        <strong><?php echo ucfirst(str_replace('_', ' ', $area)); ?>:</strong> 
                        <?php printf(__('Improved in %d%% of reviews', 'spiralengine'), $percentage); ?>
                    </li>
                <?php endforeach; ?>
            </ul>
            
            <?php if (!empty($milestones)): ?>
                <h4><?php _e('Recent Milestones', 'spiralengine'); ?></h4>
                <ul class="spiralengine-milestone-list">
                    <?php 
                    $recent_milestones = array_slice($milestones, -3);
                    foreach ($recent_milestones as $milestone): 
                    ?>
                        <li>
                            <span class="milestone-date"><?php echo date('M j', strtotime($milestone['date'])); ?>:</span>
                            <?php echo esc_html($milestone['description']); ?>
                        </li>
                    <?php endforeach; ?>
                </ul>
            <?php endif; ?>
            
            <?php if (!empty($weekly_progress)): ?>
                <h4><?php _e('Weekly Progress Trend', 'spiralengine'); ?></h4>
                <div class="spiralengine-progress-chart">
                    <?php
                    // Simple text-based chart
                    foreach ($weekly_progress as $week => $score):
                        $bar_width = ($score / 10) * 100;
                    ?>
                        <div class="progress-bar-row">
                            <span class="week-label">Week <?php echo $week; ?>:</span>
                            <div class="progress-bar" style="width: <?php echo $bar_width; ?>%;">
                                <?php echo $score; ?>/10
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>
            <?php endif; ?>
        </div>
        
        <?php if ($this->check_feature_availability('achievement_badges') && !empty($achievements)): ?>
            <div class="spiralengine-achievements">
                <h4><?php _e('Achievements Earned', 'spiralengine'); ?></h4>
                <div class="achievement-grid">
                    <?php foreach ($achievements as $key => $achievement): ?>
                        <div class="achievement-badge">
                            <span class="achievement-icon"><?php echo $achievement['icon']; ?></span>
                            <span class="achievement-name"><?php echo esc_html($achievement['name']); ?></span>
                            <span class="achievement-date"><?php echo date('M j, Y', strtotime($achievement['date'])); ?></span>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>
        <?php endif; ?>
        
        <?php if ($this->check_feature_availability('ai_insights')): ?>
            <div class="spiralengine-ai-insights">
                <h4><?php _e('AI Progress Insights', 'spiralengine'); ?></h4>
                <p class="spiralengine-ai-placeholder"><?php _e('AI will analyze your progress patterns and provide personalized insights and recommendations.', 'spiralengine'); ?></p>
            </div>
        <?php endif; ?>
        
        <?php
        return ob_get_clean();
    }
    
    /**
     * Calculate trend from scores array
     * 
     * @param array $scores Progress scores
     * @return float Trend indicator
     */
    private function calculate_trend($scores) {
        if (count($scores) < 2) {
            return 0;
        }
        
        // Simple linear trend - compare first half to second half
        $mid = floor(count($scores) / 2);
        $first_half = array_slice($scores, 0, $mid);
        $second_half = array_slice($scores, $mid);
        
        $first_avg = array_sum($first_half) / count($first_half);
        $second_avg = array_sum($second_half) / count($second_half);
        
        return $second_avg - $first_avg;
    }
}

