<?php
/**
 * SpiralEngine Core Class
 *
 * Main plugin class using singleton pattern to initialize all subsystems
 *
 * @package SpiralEngine
 * @since 1.0.0
 */

// includes/class-spiralengine-core.php

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Core plugin class
 */
class SpiralEngine_Core {
    
    /**
     * Single instance of the class
     *
     * @var SpiralEngine_Core
     */
    private static $instance = null;
    
    /**
     * Plugin version
     *
     * @var string
     */
    public $version = SPIRALENGINE_VERSION;
    
    /**
     * Plugin file path
     *
     * @var string
     */
    public $plugin_file = SPIRALENGINE_PLUGIN_FILE;
    
    /**
     * Plugin directory path
     *
     * @var string
     */
    public $plugin_dir = SPIRALENGINE_PLUGIN_DIR;
    
    /**
     * Plugin URL
     *
     * @var string
     */
    public $plugin_url = SPIRALENGINE_PLUGIN_URL;
    
    /**
     * Admin instance
     *
     * @var SpiralEngine_Admin
     */
    public $admin = null;
    
    /**
     * Membership instance
     *
     * @var SpiralEngine_Membership
     */
    public $membership = null;
    
    /**
     * Security instance
     *
     * @var SpiralEngine_Security
     */
    public $security = null;
    
    /**
     * API instance
     *
     * @var SpiralEngine_API
     */
    public $api = null;
    
    /**
     * Widget loader instance
     *
     * @var SpiralEngine_Widget_Loader
     */
    protected $widget_loader;
    
    /**
     * Widgets registry (deprecated - use widget_loader instead)
     *
     * @var array
     */
    private $widgets = [];
    
    /**
     * Loaded components
     *
     * @var array
     */
    private $loaded_components = [];
    
    /**
     * Constructor - private to enforce singleton
     */
    private function __construct() {
        // Initialize on WordPress init
        add_action('init', [$this, 'init'], 0);
        
        // Load components
        $this->load_dependencies();
        
        // Initialize hooks
        $this->init_hooks();
        
        // Initialize widget system
        $this->init_widget_system();
        
        // Check for updates
        add_action('admin_init', [$this, 'check_updates']);
    }
    
    /**
     * Get singleton instance
     *
     * @return SpiralEngine_Core
     */
    public static function get_instance(): SpiralEngine_Core {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        
        return self::$instance;
    }
    
    /**
     * Prevent cloning
     */
    private function __clone() {
        _doing_it_wrong(__FUNCTION__, __('Cloning is forbidden.', 'spiralengine'), '1.0.0');
    }
    
    /**
     * Prevent unserializing
     */
    public function __wakeup() {
        _doing_it_wrong(__FUNCTION__, __('Unserializing instances of this class is forbidden.', 'spiralengine'), '1.0.0');
    }
    
    /**
     * Initialize plugin
     */
    public function init() {
        // Check if in maintenance mode
        if ($this->is_maintenance_mode() && !current_user_can('spiralengine_super_admin')) {
            $this->show_maintenance_mode();
            return;
        }
        
        // Initialize components
        $this->init_components();
        
        // Register shortcodes
        $this->register_shortcodes();
        
        // Register widgets (deprecated - now handled by widget loader)
        // $this->register_widgets();
        
        // Initialize AJAX handlers
        $this->init_ajax_handlers();
        
        // Initialize REST API
        $this->init_rest_api();
        
        // Fire init action
        do_action('spiralengine_init', $this);
    }
    
    /**
     * Load dependencies
     */

    private function load_dependencies() {
    // Core dependencies
    $dependencies = [
        'includes/class-spiralengine-membership.php',
        'includes/class-spiralengine-security.php',
        'includes/class-spiralengine-api.php',
        // Add other core dependencies from Session 1
        'includes/class-spiralengine-database.php',
        'includes/class-spiralengine-activator.php',
        'includes/class-spiralengine-deactivator.php',
        'includes/class-spiralengine-logger.php',
        'includes/class-spiralengine-cron.php',
        'includes/class-spiralengine-notifications.php',
        'includes/class-spiralengine-analytics.php',
        'includes/class-spiralengine-export.php',
        'includes/class-spiralengine-import.php',
        'includes/class-spiralengine-privacy.php',
        'includes/class-spiralengine-integration.php',
        // Widget system files
        'includes/abstracts/class-spiralengine-widget.php',
        'includes/class-spiralengine-widget-loader.php',
        // ADD THE NEW DASHBOARD FILES HERE:
        'includes/class-dashboard.php',
        'includes/class-dashboard-router.php',
        'includes/class-visualization-components.php'
    ];

        // Admin dependencies
        if (is_admin()) {
            $dependencies[] = 'admin/class-spiralengine-admin.php';
        }
        
        // Load each dependency
        foreach ($dependencies as $file) {
            $path = $this->plugin_dir . $file;
            if (file_exists($path)) {
                require_once $path;
                $this->loaded_components[] = $file;
            }
        }
    }
    
    /**
     * Initialize hooks
     */
    private function init_hooks() {
        // User registration hook
        add_action('user_register', [$this, 'handle_user_registration']);
        
        // User deletion hook
        add_action('delete_user', [$this, 'handle_user_deletion']);
        
        // Cron hooks
        add_action('spiralengine_daily_maintenance', [$this, 'run_daily_maintenance']);
        add_action('spiralengine_hourly_checks', [$this, 'run_hourly_checks']);
        add_action('spiralengine_weekly_reports', [$this, 'run_weekly_reports']);
        
        // Script hooks
        add_action('wp_enqueue_scripts', [$this, 'enqueue_frontend_assets']);
        add_action('admin_enqueue_scripts', [$this, 'enqueue_admin_assets']);
        
        // Template hooks
        add_filter('template_include', [$this, 'template_loader']);
        
        // Query hooks
        add_action('pre_get_posts', [$this, 'modify_queries']);
    }
    
    /**
     * Initialize widget system
     *
     * @since 1.0.0
     * @return void
     */
    private function init_widget_system() {
        if (class_exists('SpiralEngine_Widget_Loader')) {
            $this->widget_loader = new SpiralEngine_Widget_Loader();
        }
    }
    
    /**
     * Get widget loader
     *
     * @since 1.0.0
     * @return SpiralEngine_Widget_Loader
     */
    public function get_widget_loader() {
        return $this->widget_loader;
    }
    
    /**
     * Initialize components
     */
    private function init_components() {
        // Initialize membership system
        if (class_exists('SpiralEngine_Membership')) {
            $this->membership = new SpiralEngine_Membership();
        }
        
        // Initialize security system
        if (class_exists('SpiralEngine_Security')) {
            $this->security = new SpiralEngine_Security();
        }
        
        // Initialize API
        if (class_exists('SpiralEngine_API')) {
            $this->api = new SpiralEngine_API();
        }
        
        // Initialize admin
        if (is_admin() && class_exists('SpiralEngine_Admin')) {
            $this->admin = new SpiralEngine_Admin();
        }
        
        // Allow components to be filtered
        do_action('spiralengine_components_loaded', $this);
    }
    
    /**
     * Register shortcodes
     */
    private function register_shortcodes() {
        $shortcodes = [
            'spiralengine_dashboard' => [$this, 'render_dashboard_shortcode'],
            'spiralengine_pricing' => [$this, 'render_pricing_shortcode'],
            'spiralengine_account' => [$this, 'render_account_shortcode'],
            'spiralengine_widget' => [$this, 'render_widget_shortcode'],
            'spiralengine_track' => [$this, 'render_track_shortcode']
        ];
        
        foreach ($shortcodes as $tag => $callback) {
            add_shortcode($tag, $callback);
        }
        
        // Allow additional shortcodes to be registered
        do_action('spiralengine_register_shortcodes', $this);
    }
    
    /**
     * Register widgets (DEPRECATED - use widget loader instead)
     *
     * @deprecated 1.0.0 Use widget loader system instead
     */
    private function register_widgets() {
        // This method is deprecated in favor of the widget loader system
        // Kept for backward compatibility
        _deprecated_function(__METHOD__, '1.0.0', 'SpiralEngine_Widget_Loader');
    }
    
    /**
     * Initialize AJAX handlers
     */
    private function init_ajax_handlers() {
        // Public AJAX handlers
        $public_actions = [
            'spiralengine_track_episode',
            'spiralengine_get_insights',
            'spiralengine_export_data'
        ];
        
        foreach ($public_actions as $action) {
            add_action('wp_ajax_' . $action, [$this, 'handle_ajax_' . $action]);
            add_action('wp_ajax_nopriv_' . $action, [$this, 'handle_ajax_' . $action]);
        }
        
        // Admin-only AJAX handlers
        $admin_actions = [
            'spiralengine_admin_update_tier',
            'spiralengine_admin_impersonate',
            'spiralengine_admin_bulk_action'
        ];
        
        foreach ($admin_actions as $action) {
            add_action('wp_ajax_' . $action, [$this, 'handle_ajax_' . $action]);
        }
    }
    
    /**
     * Initialize REST API
     */
    private function init_rest_api() {
        add_action('rest_api_init', function() {
            // Register REST routes
            register_rest_route('spiralengine/v1', '/episodes', [
                'methods' => 'GET',
                'callback' => [$this->api, 'get_episodes'],
                'permission_callback' => [$this, 'rest_permission_check']
            ]);
            
            register_rest_route('spiralengine/v1', '/episodes', [
                'methods' => 'POST',
                'callback' => [$this->api, 'create_episode'],
                'permission_callback' => [$this, 'rest_permission_check']
            ]);
            
            register_rest_route('spiralengine/v1', '/insights', [
                'methods' => 'GET',
                'callback' => [$this->api, 'get_insights'],
                'permission_callback' => [$this, 'rest_permission_check']
            ]);
            
            // Admin routes
            register_rest_route('spiralengine/v1', '/admin/users', [
                'methods' => 'GET',
                'callback' => [$this->api, 'get_users'],
                'permission_callback' => [$this, 'rest_admin_permission_check']
            ]);
        });
    }
    
    /**
     * Check for plugin updates
     */
    public function check_updates() {
        // Check if database needs update
        $installer = new SpiralEngine_Installer();
        if ($installer->needs_update()) {
            $installer->update();
        }
        
        // Check for other updates
        do_action('spiralengine_check_updates', $this);
    }
    
    /**
     * Handle user registration
     *
     * @param int $user_id New user ID
     */
    public function handle_user_registration(int $user_id) {
        // Create default membership
        $installer = new SpiralEngine_Installer();
        $installer->create_default_membership($user_id);
        
        // Log registration
        self::log_admin_action('user_registered', 'user', $user_id, [
            'registration_method' => 'wordpress',
            'initial_tier' => SPIRALENGINE_TIER_FREE
        ]);
        
        // Fire action
        do_action('spiralengine_user_registered', $user_id);
    }
    
    /**
     * Handle user deletion
     *
     * @param int $user_id User ID being deleted
     */
    public function handle_user_deletion(int $user_id) {
        global $wpdb;
        
        // Delete user data based on settings
        $delete_data = get_option('spiralengine_delete_user_data', false);
        
        if ($delete_data) {
            // Delete memberships
            $wpdb->delete(
                $wpdb->prefix . 'spiralengine_memberships',
                ['user_id' => $user_id],
                ['%d']
            );
            
            // Delete episodes
            $wpdb->delete(
                $wpdb->prefix . 'spiralengine_episodes',
                ['user_id' => $user_id],
                ['%d']
            );
        } else {
            // Mark membership as deleted but keep data
            $wpdb->update(
                $wpdb->prefix . 'spiralengine_memberships',
                ['status' => 'deleted'],
                ['user_id' => $user_id],
                ['%s'],
                ['%d']
            );
        }
        
        // Log deletion
        self::log_admin_action('user_deleted', 'user', $user_id, [
            'data_deleted' => $delete_data
        ]);
        
        // Fire action
        do_action('spiralengine_user_deleted', $user_id, $delete_data);
    }
    
    /**
     * Run daily maintenance
     */
    public function run_daily_maintenance() {
        // Clean expired sessions
        $this->clean_expired_sessions();
        
        // Update membership expirations
        $this->check_membership_expirations();
        
        // Clean old logs
        $this->clean_old_logs();
        
        // Optimize tables
        $this->optimize_tables();
        
        // Fire maintenance action
        do_action('spiralengine_daily_maintenance', $this);
    }
    
    /**
     * Run hourly checks
     */
    public function run_hourly_checks() {
        // Check system health
        $this->check_system_health();
        
        // Process queued tasks
        $this->process_queue();
        
        // Update statistics
        $this->update_statistics();
        
        // Fire hourly action
        do_action('spiralengine_hourly_checks', $this);
    }
    
    /**
     * Run weekly reports
     */
    public function run_weekly_reports() {
        // Generate admin reports
        $this->generate_admin_reports();
        
        // Send user summaries if enabled
        $this->send_user_summaries();
        
        // Fire weekly action
        do_action('spiralengine_weekly_reports', $this);
    }
    
    /**
     * Enqueue frontend assets
     */
    public function enqueue_frontend_assets() {
        // Main styles
        wp_enqueue_style(
            'spiralengine-frontend',
            $this->plugin_url . 'assets/css/frontend.css',
            [],
            $this->version
        );
        
        // Main scripts
        wp_enqueue_script(
            'spiralengine-frontend',
            $this->plugin_url . 'assets/js/frontend.js',
            ['jquery'],
            $this->version,
            true
        );
        
        // Localize script
        wp_localize_script('spiralengine-frontend', 'spiralengine', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'rest_url' => rest_url('spiralengine/v1/'),
            'nonce' => wp_create_nonce('spiralengine_nonce'),
            'user_id' => get_current_user_id(),
            'tier' => $this->get_user_tier(),
            'i18n' => [
                'error' => __('An error occurred. Please try again.', 'spiralengine'),
                'success' => __('Success!', 'spiralengine'),
                'loading' => __('Loading...', 'spiralengine'),
                'confirm' => __('Are you sure?', 'spiralengine')
            ]
        ]);
        
        // Dashboard specific assets
        if (is_page(get_option('spiralengine_dashboard_page_id'))) {
            wp_enqueue_style(
                'spiralengine-dashboard',
                $this->plugin_url . 'assets/css/dashboard.css',
                ['spiralengine-frontend'],
                $this->version
            );
            
            wp_enqueue_script(
                'spiralengine-dashboard',
                $this->plugin_url . 'assets/js/dashboard.js',
                ['spiralengine-frontend'],
                $this->version,
                true
            );
            
            // Widget assets
            wp_enqueue_style(
                'spiralengine-widgets',
                $this->plugin_url . 'assets/css/widgets.css',
                ['spiralengine-dashboard'],
                $this->version
            );
            
            wp_enqueue_script(
                'spiralengine-widgets',
                $this->plugin_url . 'assets/js/widgets.js',
                ['spiralengine-dashboard'],
                $this->version,
                true
            );
        }
    }
    
    /**
     * Enqueue admin assets
     */
    public function enqueue_admin_assets($hook) {
        // Only load on our admin pages
        if (strpos($hook, 'spiralengine') === false) {
            return;
        }
        
        // Admin styles
        wp_enqueue_style(
            'spiralengine-admin',
            $this->plugin_url . 'assets/css/admin.css',
            [],
            $this->version
        );
        
        // Admin scripts
        wp_enqueue_script(
            'spiralengine-admin',
            $this->plugin_url . 'assets/js/admin.js',
            ['jquery', 'wp-util'],
            $this->version,
            true
        );
        
        // Localize admin script
        wp_localize_script('spiralengine-admin', 'spiralengine_admin', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('spiralengine_admin_nonce'),
            'i18n' => [
                'confirm_impersonate' => __('Are you sure you want to impersonate this user?', 'spiralengine'),
                'confirm_bulk' => __('Are you sure you want to perform this bulk action?', 'spiralengine'),
                'processing' => __('Processing...', 'spiralengine')
            ]
        ]);
    }
    
    /**
     * Template loader
     *
     * @param string $template Template path
     * @return string Modified template path
     */
    public function template_loader(string $template): string {
        // Check if we're on a SpiralEngine page
        if (is_page()) {
            $page_id = get_the_ID();
            $spiralengine_pages = [
                get_option('spiralengine_dashboard_page_id'),
                get_option('spiralengine_pricing_page_id'),
                get_option('spiralengine_account_page_id')
            ];
            
            if (in_array($page_id, $spiralengine_pages)) {
                // Look for custom template
                $custom_template = locate_template(['spiralengine-page.php']);
                
                if ($custom_template) {
                    return $custom_template;
                }
                
                // Use plugin template
                $plugin_template = $this->plugin_dir . 'templates/page.php';
                if (file_exists($plugin_template)) {
                    return $plugin_template;
                }
            }
        }
        
        return $template;
    }
    
    /**
     * Modify queries
     *
     * @param WP_Query $query Query object
     */
    public function modify_queries($query) {
        // Modify queries if needed
        do_action('spiralengine_pre_get_posts', $query);
    }
    
    /**
     * Register a widget (DEPRECATED - use widget loader)
     *
     * @deprecated 1.0.0 Use widget loader instead
     * @param object $widget Widget instance implementing SpiralEngine_Widget_Interface
     * @return bool Success status
     */
    public function register_widget($widget): bool {
        _deprecated_function(__METHOD__, '1.0.0', '$this->get_widget_loader()->register_widget()');
        
        if ($this->widget_loader) {
            return $this->widget_loader->register_widget($widget);
        }
        
        return false;
    }
    
    /**
     * Get registered widget
     *
     * @param string $widget_id Widget ID
     * @return object|null Widget instance or null
     */
    public function get_widget(string $widget_id) {
        if ($this->widget_loader) {
            return $this->widget_loader->get_widget($widget_id);
        }
        
        return null;
    }
    
    /**
     * Get all registered widgets
     *
     * @return array Array of widget instances
     */
    public function get_widgets(): array {
        if ($this->widget_loader) {
            return $this->widget_loader->get_widgets();
        }
        
        return [];
    }
    
    /**
     * Save episode data
     *
     * @param string $widget_id Widget ID
     * @param array $data Episode data
     * @param array $metadata Optional metadata
     * @return int|false Episode ID or false on failure
     */
    public function save_episode(string $widget_id, array $data, array $metadata = []) {
        global $wpdb;
        
        $user_id = get_current_user_id();
        if (!$user_id) {
            return false;
        }
        
        // Check permissions
        if (!$this->can('track_episodes', $user_id)) {
            return false;
        }
        
        // Get widget through widget loader
        $widget = $this->get_widget($widget_id);
        if (!$widget) {
            return false;
        }
        
        // Validate data
        $validated_data = $widget->validate_data($data);
        if (is_wp_error($validated_data)) {
            return false;
        }
        
        // Check usage limits
        if (!$this->check_usage_limit('episodes', $user_id)) {
            return false;
        }
        
        // Prepare data
        $severity = isset($validated_data['severity']) ? intval($validated_data['severity']) : 5;
        
        // Insert episode
        $result = $wpdb->insert(
            $wpdb->prefix . 'spiralengine_episodes',
            [
                'user_id' => $user_id,
                'widget_id' => $widget_id,
                'severity' => $severity,
                'data' => json_encode($validated_data),
                'metadata' => json_encode($metadata),
                'created_at' => current_time('mysql'),
                'updated_at' => current_time('mysql')
            ],
            ['%d', '%s', '%d', '%s', '%s', '%s', '%s']
        );
        
        if ($result === false) {
            return false;
        }
        
        $episode_id = $wpdb->insert_id;
        
        // Update usage
        $this->update_usage('episodes', $user_id);
        
        // Fire action
        do_action('spiralengine_episode_saved', $episode_id, $widget_id, $user_id, $validated_data);
        
        return $episode_id;
    }
    
    /**
     * Get episodes
     *
     * @param string $widget_id Widget ID (or 'all' for all widgets)
     * @param int $user_id User ID (0 for current user)
     * @param array $args Query arguments
     * @return array Array of episodes
     */
    public function get_episodes(string $widget_id, int $user_id = 0, array $args = []): array {
        global $wpdb;
        
        if (!$user_id) {
            $user_id = get_current_user_id();
        }
        
        if (!$user_id) {
            return [];
        }
        
        // Check permissions
        if ($user_id !== get_current_user_id() && !current_user_can('spiralengine_user_manager')) {
            return [];
        }
        
        // Default args
        $defaults = [
            'limit' => 50,
            'offset' => 0,
            'order' => 'DESC',
            'orderby' => 'created_at',
            'date_from' => '',
            'date_to' => '',
            'severity_min' => 0,
            'severity_max' => 10
        ];
        
        $args = wp_parse_args($args, $defaults);
        
        // Build query
        $query = "SELECT * FROM {$wpdb->prefix}spiralengine_episodes WHERE user_id = %d";
        $query_args = [$user_id];
        
        if ($widget_id !== 'all') {
            $query .= " AND widget_id = %s";
            $query_args[] = $widget_id;
        }
        
        if (!empty($args['date_from'])) {
            $query .= " AND created_at >= %s";
            $query_args[] = $args['date_from'];
        }
        
        if (!empty($args['date_to'])) {
            $query .= " AND created_at <= %s";
            $query_args[] = $args['date_to'];
        }
        
        $query .= " AND severity >= %d AND severity <= %d";
        $query_args[] = $args['severity_min'];
        $query_args[] = $args['severity_max'];
        
        // Order and limit
        $query .= sprintf(
            " ORDER BY %s %s LIMIT %d OFFSET %d",
            esc_sql($args['orderby']),
            esc_sql($args['order']),
            intval($args['limit']),
            intval($args['offset'])
        );
        
        // Execute query
        $episodes = $wpdb->get_results(
            $wpdb->prepare($query, $query_args),
            ARRAY_A
        );
        
        // Decode JSON fields
        foreach ($episodes as &$episode) {
            $episode['data'] = json_decode($episode['data'], true);
            $episode['metadata'] = json_decode($episode['metadata'], true);
        }
        
        return $episodes;
    }
    
    /**
     * Check if user can perform action
     *
     * @param string $capability Capability to check
     * @param int $user_id User ID (0 for current user)
     * @return bool Whether user can perform action
     */
    public function can(string $capability, int $user_id = 0): bool {
        if (!$user_id) {
            $user_id = get_current_user_id();
        }
        
        if (!$user_id) {
            return false;
        }
        
        // Map capabilities to actual checks
        switch ($capability) {
            case 'track_episodes':
                return user_can($user_id, 'spiralengine_track_episodes');
                
            case 'view_insights':
                return user_can($user_id, 'spiralengine_view_insights');
                
            case 'export_data':
                return user_can($user_id, 'spiralengine_export_own_data');
                
            case 'manage_account':
                return user_can($user_id, 'spiralengine_manage_account');
                
            default:
                return user_can($user_id, 'spiralengine_' . $capability);
        }
    }
    
    /**
     * Get user tier
     *
     * @param int $user_id User ID (0 for current user)
     * @return string User tier
     */
    public function get_user_tier(int $user_id = 0): string {
        if ($this->membership) {
            return $this->membership->get_user_tier($user_id);
        }
        
        return SPIRALENGINE_TIER_FREE;
    }
    
    /**
     * Check usage limit
     *
     * @param string $type Usage type
     * @param int $user_id User ID
     * @return bool Whether within limits
     */
    public function check_usage_limit(string $type, int $user_id = 0): bool {
        if ($this->membership) {
            return $this->membership->check_usage_limit($type, $user_id);
        }
        
        return true;
    }
    
    /**
     * Update usage
     *
     * @param string $type Usage type
     * @param int $user_id User ID
     * @param int $amount Amount to add
     */
    public function update_usage(string $type, int $user_id = 0, int $amount = 1) {
        if ($this->membership) {
            $this->membership->update_usage($type, $user_id, $amount);
        }
    }
    
    /**
     * Log admin action
     *
     * @param string $action Action name
     * @param string $target_type Target type
     * @param int $target_id Target ID
     * @param array $details Additional details
     */
    public static function log_admin_action(string $action, string $target_type = null, int $target_id = 0, array $details = []) {
        global $wpdb;
        
        $admin_id = get_current_user_id();
        if (!$admin_id) {
            $admin_id = 1; // System actions
        }
        
        $wpdb->insert(
            $wpdb->prefix . 'spiralengine_admin_log',
            [
                'admin_id' => $admin_id,
                'action' => $action,
                'target_type' => $target_type,
                'target_id' => $target_id,
                'details' => json_encode($details),
                'ip_address' => self::get_ip_address(),
                'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown',
                'created_at' => current_time('mysql')
            ],
            ['%d', '%s', '%s', '%d', '%s', '%s', '%s', '%s']
        );
    }
    
    /**
     * Validate widget (DEPRECATED - handled by widget loader)
     *
     * @deprecated 1.0.0 Widget validation is now handled by widget loader
     * @param object $widget Widget instance
     * @return bool Whether valid
     */
    private function validate_widget($widget): bool {
        _deprecated_function(__METHOD__, '1.0.0', 'SpiralEngine_Widget_Loader::validate_widget()');
        return true;
    }
    
    /**
     * Check if in maintenance mode
     *
     * @return bool Whether in maintenance mode
     */
    private function is_maintenance_mode(): bool {
        return get_option('spiralengine_maintenance_mode', false);
    }
    
    /**
     * Show maintenance mode page
     */
    private function show_maintenance_mode() {
        // Load maintenance template
        $template = $this->plugin_dir . 'templates/maintenance.php';
        
        if (file_exists($template)) {
            include $template;
        } else {
            wp_die(__('SpiralEngine is currently undergoing maintenance. Please check back later.', 'spiralengine'));
        }
        
        exit;
    }
    
    /**
     * Clean expired sessions
     */
    private function clean_expired_sessions() {
        // Implementation depends on session handling
        do_action('spiralengine_clean_sessions');
    }
    
    /**
     * Check membership expirations
     */
    private function check_membership_expirations() {
        if ($this->membership) {
            $this->membership->check_expirations();
        }
    }
    
    /**
     * Clean old logs
     */
    private function clean_old_logs() {
        global $wpdb;
        
        $retention_days = get_option('spiralengine_log_retention_days', 90);
        $cutoff_date = date('Y-m-d', strtotime("-{$retention_days} days"));
        
        $wpdb->query(
            $wpdb->prepare(
                "DELETE FROM {$wpdb->prefix}spiralengine_admin_log 
                WHERE created_at < %s",
                $cutoff_date
            )
        );
    }
    
    /**
     * Optimize database tables
     */
    private function optimize_tables() {
        global $wpdb;
        
        $tables = [
            $wpdb->prefix . 'spiralengine_memberships',
            $wpdb->prefix . 'spiralengine_episodes',
            $wpdb->prefix . 'spiralengine_admin_log'
        ];
        
        foreach ($tables as $table) {
            $wpdb->query("OPTIMIZE TABLE $table");
        }
    }
    
    /**
     * Check system health
     */
    private function check_system_health() {
        $health = [
            'status' => 'healthy',
            'issues' => []
        ];
        
        // Check database
        global $wpdb;
        $tables = ['spiralengine_memberships', 'spiralengine_episodes', 'spiralengine_admin_log'];
        
        foreach ($tables as $table) {
            $exists = $wpdb->get_var("SHOW TABLES LIKE '{$wpdb->prefix}$table'");
            if (!$exists) {
                $health['status'] = 'critical';
                $health['issues'][] = "Missing table: $table";
            }
        }
        
        // Check disk space
        $free_space = disk_free_space(ABSPATH);
        if ($free_space < 100 * 1024 * 1024) { // Less than 100MB
            $health['status'] = 'warning';
            $health['issues'][] = 'Low disk space';
        }
        
        // Store health status
        update_option('spiralengine_system_health', $health);
        
        // Alert if critical
        if ($health['status'] === 'critical') {
            $this->send_admin_alert('System Health Critical', $health['issues']);
        }
    }
    
    /**
     * Process queue
     */
    private function process_queue() {
        // Process any queued tasks
        do_action('spiralengine_process_queue');
    }
    
    /**
     * Update statistics
     */
    private function update_statistics() {
        global $wpdb;
        
        $stats = [
            'total_users' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}spiralengine_memberships"),
            'total_episodes' => $wpdb->get_var("SELECT COUNT(*) FROM {$wpdb->prefix}spiralengine_episodes"),
            'active_users_today' => $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT COUNT(DISTINCT user_id) FROM {$wpdb->prefix}spiralengine_episodes 
                    WHERE created_at >= %s",
                    date('Y-m-d 00:00:00')
                )
            ),
            'updated_at' => current_time('mysql')
        ];
        
        update_option('spiralengine_statistics', $stats);
    }
    
    /**
     * Generate admin reports
     */
    private function generate_admin_reports() {
        // Generate reports
        do_action('spiralengine_generate_reports');
    }
    
    /**
     * Send user summaries
     */
    private function send_user_summaries() {
        if (!get_option('spiralengine_send_user_summaries', false)) {
            return;
        }
        
        // Send summaries
        do_action('spiralengine_send_summaries');
    }
    
    /**
     * Send admin alert
     *
     * @param string $subject Alert subject
     * @param array $issues Issues list
     */
    private function send_admin_alert(string $subject, array $issues) {
        $admin_email = get_option('admin_email');
        $message = "SpiralEngine Alert: $subject\n\n";
        $message .= "Issues detected:\n";
        
        foreach ($issues as $issue) {
            $message .= "- $issue\n";
        }
        
        wp_mail($admin_email, "[SpiralEngine] $subject", $message);
    }
    
    /**
     * Get IP address
     *
     * @return string IP address
     */
    private static function get_ip_address(): string {
        $ip_keys = ['HTTP_X_FORWARDED_FOR', 'HTTP_X_REAL_IP', 'REMOTE_ADDR'];
        
        foreach ($ip_keys as $key) {
            if (!empty($_SERVER[$key])) {
                $ip = $_SERVER[$key];
                if (strpos($ip, ',') !== false) {
                    $ip = trim(explode(',', $ip)[0]);
                }
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    return $ip;
                }
            }
        }
        
        return '127.0.0.1';
    }
    
    /**
     * REST permission check
     *
     * @return bool Whether has permission
     */
    public function rest_permission_check(): bool {
        return is_user_logged_in();
    }
    
    /**
     * REST admin permission check
     *
     * @return bool Whether has admin permission
     */
    public function rest_admin_permission_check(): bool {
        return current_user_can('spiralengine_user_manager');
    }
    
    /**
     * Render dashboard shortcode
     *
     * @param array $atts Shortcode attributes
     * @return string Rendered content
     */
    public function render_dashboard_shortcode($atts): string {
        if (!is_user_logged_in()) {
            return '<p>' . __('Please log in to access your dashboard.', 'spiralengine') . '</p>';
        }
        
        ob_start();
        include $this->plugin_dir . 'templates/dashboard.php';
        return ob_get_clean();
    }
    
    /**
     * Render pricing shortcode
     *
     * @param array $atts Shortcode attributes
     * @return string Rendered content
     */
    public function render_pricing_shortcode($atts): string {
        ob_start();
        include $this->plugin_dir . 'templates/pricing.php';
        return ob_get_clean();
    }
    
    /**
     * Render account shortcode
     *
     * @param array $atts Shortcode attributes
     * @return string Rendered content
     */
    public function render_account_shortcode($atts): string {
        if (!is_user_logged_in()) {
            return '<p>' . __('Please log in to access your account.', 'spiralengine') . '</p>';
        }
        
        ob_start();
        include $this->plugin_dir . 'templates/account.php';
        return ob_get_clean();
    }
    
    /**
     * Render widget shortcode
     *
     * @param array $atts Shortcode attributes
     * @return string Rendered content
     */
    public function render_widget_shortcode($atts): string {
        $atts = shortcode_atts([
            'id' => '',
            'type' => 'form'
        ], $atts);
        
        if (empty($atts['id'])) {
            return '';
        }
        
        $widget = $this->get_widget($atts['id']);
        if (!$widget) {
            return '';
        }
        
        if ($atts['type'] === 'analytics') {
            return $widget->render_analytics(get_current_user_id());
        }
        
        return $widget->render_form($atts);
    }
    
    /**
     * Render track shortcode
     *
     * @param array $atts Shortcode attributes
     * @return string Rendered content
     */
    public function render_track_shortcode($atts): string {
        if (!is_user_logged_in()) {
            return '<p>' . __('Please log in to track episodes.', 'spiralengine') . '</p>';
        }
        
        ob_start();
        include $this->plugin_dir . 'templates/track.php';
        return ob_get_clean();
    }
}

